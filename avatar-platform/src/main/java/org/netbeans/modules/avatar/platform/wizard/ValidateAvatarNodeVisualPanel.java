/* Copyright (C) 2014 Tim Boudreau

 Permission is hereby granted, free of charge, to any person obtaining a copy 
 of this software and associated documentation files (the "Software"), to 
 deal in the Software without restriction, including without limitation the 
 rights to use, copy, modify, merge, publish, distribute, sublicense, and/or 
 sell copies of the Software, and to permit persons to whom the Software is 
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all 
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
 COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
 IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */
package org.netbeans.modules.avatar.platform.wizard;

import java.awt.EventQueue;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import javax.swing.JPanel;
import org.netbeans.modules.avatar.platform.AvatarPlatform;
import org.netbeans.modules.avatar.platform.AvatarPlatformType;
import org.netbeans.modules.nodejs.api.NodeJSPlatformType;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle.Messages;
import org.openide.util.RequestProcessor;

@Messages({"STEP_3=Validate Platform", "EXECUTION_FAILED=Execution failed.  Did not successfully run the probe script."})
public final class ValidateAvatarNodeVisualPanel extends JPanel implements Runnable {

    private File file;

    public ValidateAvatarNodeVisualPanel() {
        initComponents();
    }

    @Override
    public String getName() {
        return Bundle.STEP_3();
    }

    synchronized void setFile(File f) {
        this.file = f;
        if (f != null) {
            setOk(false);
            RequestProcessor.getDefault().post(this);
        } else {
            ok = false;
            firePropertyChange("ok", true, false); //NOI18N
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ValidateAvatarNodeVisualPanel.class, "ValidateAvatarNodeVisualPanel.jLabel1.text")); // NOI18N

        jProgressBar1.setIndeterminate(true);

        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText(org.openide.util.NbBundle.getMessage(ValidateAvatarNodeVisualPanel.class, "ValidateAvatarNodeVisualPanel.jTextArea1.text")); // NOI18N
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setEnabled(false);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private volatile boolean ok;

    public void setOk(boolean ok) {
        this.ok = ok;
        firePropertyChange("ok", !ok, ok); //NOI18N
    }

    public boolean isOk() {
        return ok;
    }

    @Override
    public void run() {
        if (!EventQueue.isDispatchThread()) {
            File f;
            synchronized (this) {
                f = this.file;
            }
            validate(f);
        } else {
            firePropertyChange("ok", !ok, ok); //NOI18N
            if (message != null) {
                jTextArea1.setText(message);
            }
            jProgressBar1.setIndeterminate(!ok);
            jProgressBar1.setVisible(!ok);
        }
    }

    private int ct = 1;
    private volatile String message;

    private volatile Map<String, Object> loaded;

    public Map<String, Object> data() {
        return loaded;
    }

    private void validate(File f) {
        try {
            File tmp = new File(System.getProperty("java.io.tmpdir")); //NOI18N
            int id = ct++;
            File probeFile = new File(tmp, System.currentTimeMillis() + "-" + id + "-probe.js"); //NOI18N
            probeFile.createNewFile();
            File outFile = new File(tmp, System.currentTimeMillis() + "-" + id + "-avatarplatform.json"); //NOI18N

            try (FileOutputStream out = new FileOutputStream(probeFile)) {
                try (InputStream in = ValidateAvatarNodeVisualPanel.class.getResourceAsStream("probe.js")) { //NOI18N
                    FileUtil.copy(in, out);
                }
            }
            AvatarPlatform test = AvatarPlatformType.create(f);
            FileObject fob = FileUtil.toFileObject(FileUtil.normalizeFile(probeFile));
            Future<Integer> fut = test.run(fob, outFile.getAbsolutePath());
            Integer result = fut.get();
            if (result != null && result == 0) {
                Map<String, Object> m = loaded = NodeJSPlatformType.toJson(outFile);
                StringBuilder sb = new StringBuilder();
                for (Map.Entry<String, Object> e : m.entrySet()) {
                    sb.append(e.getKey()).append(" = ").append(e.getValue()).append('\n');
                }
                message = sb.toString();
                ok = true;
            } else {
                ok = false;
                message = Bundle.EXECUTION_FAILED();
            }
            EventQueue.invokeLater(this);
        } catch (IOException | InterruptedException | ExecutionException ex) {
            Exceptions.printStackTrace(ex);
        }
    }
}
